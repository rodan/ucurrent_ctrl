!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(OBJS)	Makefile	/^$(OBJS): $(PROJ).cflags$/;"	t
$(PROJ).cflags	Makefile	/^$(PROJ).cflags: force$/;"	t
$(PROJ).dep	Makefile	/^$(PROJ).dep: $(SRCS)$/;"	t
$(PROJ).elf	Makefile	/^$(PROJ).elf: $(OBJS)$/;"	t
%.o	Makefile	/^%.o: %.c$/;"	t
AR	Makefile	/^AR              = msp430-elf-ar$/;"	m
AS	Makefile	/^AS              = msp430-elf-as$/;"	m
BASH	Makefile	/^BASH := $(shell which bash || which bash)$/;"	m
BITS_12	drivers/ads1110.h	/^#define BITS_12 /;"	d
BITS_14	drivers/ads1110.h	/^#define BITS_14 /;"	d
BITS_15	drivers/ads1110.h	/^#define BITS_15 /;"	d
BITS_16	drivers/ads1110.h	/^#define BITS_16 /;"	d
CC	Makefile	/^CC              = msp430-elf-gcc$/;"	m
CC_CMACH	Makefile	/^CC_CMACH	= -mmcu=msp430f5510$/;"	m
CC_DMACH	Makefile	/^CC_DMACH	= -D__MSP430F5510__$/;"	m
DEBUG	Makefile	/^DEBUG := $(shell grep "^\\#define CONFIG_DEBUG" config.h)$/;"	m
ED0	drivers/ads1110.h	/^#define ED0 /;"	d
ED1	drivers/ads1110.h	/^#define ED1 /;"	d
ED2	drivers/ads1110.h	/^#define ED2 /;"	d
ED3	drivers/ads1110.h	/^#define ED3 /;"	d
ED4	drivers/ads1110.h	/^#define ED4 /;"	d
ED5	drivers/ads1110.h	/^#define ED5 /;"	d
ED6	drivers/ads1110.h	/^#define ED6 /;"	d
ED7	drivers/ads1110.h	/^#define ED7 /;"	d
FLASH_ADDR	proj.h	/^#define FLASH_ADDR /;"	d
HARDWARE_I2C	config.h	/^#define HARDWARE_I2C$/;"	d
I2C_ACK	drivers/serial_bitbang.h	/^#define I2C_ACK /;"	d
I2C_BR	drivers/i2c_internal.h	/^#define I2C_BR /;"	d
I2C_BUSY	drivers/i2c.h	/^    I2C_BUSY,               \/\/\/< A transfer is in progress.$/;"	e	enum:__anonfe5e22c70203
I2C_CLK_DIV	drivers/i2c_config.TEMPLATE.h	/^#define I2C_CLK_DIV /;"	d
I2C_CLK_DIV	drivers/i2c_config.h	/^#define I2C_CLK_DIV /;"	d
I2C_CLK_SRC	drivers/i2c_config.TEMPLATE.h	/^#define I2C_CLK_SRC /;"	d
I2C_CLK_SRC	drivers/i2c_config.h	/^#define I2C_CLK_SRC /;"	d
I2C_CTL0	drivers/i2c_internal.h	/^#define I2C_CTL0 /;"	d
I2C_CTL1	drivers/i2c_internal.h	/^#define I2C_CTL1 /;"	d
I2C_FAILED	drivers/i2c.h	/^    I2C_FAILED              \/\/\/< Previous transfer failed. Ready for new transfer.$/;"	e	enum:__anonfe5e22c70203
I2C_ICTL	drivers/i2c_internal.h	/^#define I2C_ICTL /;"	d
I2C_IDLE	drivers/i2c.h	/^    I2C_IDLE,               \/\/\/< Bus is idle. Ready for new transfer.$/;"	e	enum:__anonfe5e22c70203
I2C_IE	drivers/i2c_internal.h	/^#define I2C_IE /;"	d
I2C_IFG	drivers/i2c_internal.h	/^#define I2C_IFG /;"	d
I2C_ISR_VECTOR	drivers/i2c_internal.h	/^#define I2C_ISR_VECTOR /;"	d
I2C_IV	drivers/i2c_internal.h	/^#define I2C_IV /;"	d
I2C_MASTER_DIR	proj.h	/^#define I2C_MASTER_DIR /;"	d
I2C_MASTER_IN	proj.h	/^#define I2C_MASTER_IN /;"	d
I2C_MASTER_OUT	proj.h	/^#define I2C_MASTER_OUT /;"	d
I2C_MASTER_SCL	proj.h	/^#define I2C_MASTER_SCL /;"	d
I2C_MASTER_SDA	proj.h	/^#define I2C_MASTER_SDA /;"	d
I2C_MISSING_SCL_PULLUP	drivers/serial_bitbang.h	/^#define I2C_MISSING_SCL_PULLUP /;"	d
I2C_MISSING_SDA_PULLUP	drivers/serial_bitbang.h	/^#define I2C_MISSING_SDA_PULLUP /;"	d
I2C_NAK	drivers/serial_bitbang.h	/^#define I2C_NAK /;"	d
I2C_NO_ADDR_SHIFT	drivers/serial_bitbang.h	/^#define I2C_NO_ADDR_SHIFT /;"	d
I2C_OA	drivers/i2c_internal.h	/^#define I2C_OA /;"	d
I2C_OK	drivers/serial_bitbang.h	/^#define I2C_OK /;"	d
I2C_READ	drivers/serial_bitbang.h	/^#define I2C_READ /;"	d
I2C_RXBUF	drivers/i2c_internal.h	/^#define I2C_RXBUF /;"	d
I2C_SA	drivers/i2c_internal.h	/^#define I2C_SA /;"	d
I2C_SDA_WAIT	drivers/serial_bitbang.h	/^#define I2C_SDA_WAIT /;"	d
I2C_STAT	drivers/i2c_internal.h	/^#define I2C_STAT /;"	d
I2C_TXBUF	drivers/i2c_internal.h	/^#define I2C_TXBUF /;"	d
I2C_TX_BUFF_LEN	drivers/i2c.h	/^#define I2C_TX_BUFF_LEN /;"	d
I2C_USE_DEV	drivers/i2c_config.TEMPLATE.h	/^#define I2C_USE_DEV /;"	d
I2C_USE_DEV	drivers/i2c_config.h	/^#define I2C_USE_DEV /;"	d
I2C_WRITE	drivers/serial_bitbang.h	/^#define I2C_WRITE /;"	d
LD	Makefile	/^LD              = msp430-elf-ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS		=$/;"	m
OBJS	Makefile	/^OBJS := $(patsubst %.c,%.o,$(SRCS))$/;"	m
PGA_1	drivers/ads1110.h	/^#define PGA_1 /;"	d
PGA_2	drivers/ads1110.h	/^#define PGA_2 /;"	d
PGA_4	drivers/ads1110.h	/^#define PGA_4 /;"	d
PGA_8	drivers/ads1110.h	/^#define PGA_8 /;"	d
PROJ	Makefile	/^PROJ = proj$/;"	m
Port_1	proj.c	/^__interrupt void Port_1(void)$/;"	f	typeref:typename:__interrupt void
SC	drivers/ads1110.h	/^#define SC /;"	d
SEGMENT_B	drivers/flash.h	/^#define SEGMENT_B /;"	d
SEGMENT_C	drivers/flash.h	/^#define SEGMENT_C /;"	d
SEGMENT_D	drivers/flash.h	/^#define SEGMENT_D /;"	d
SM_DONE	drivers/i2c.c	/^    SM_DONE$/;"	e	enum:__anonfe5e22c20103	file:
SM_READ_DATA	drivers/i2c.c	/^    SM_READ_DATA,$/;"	e	enum:__anonfe5e22c20103	file:
SM_SEND_ADDR	drivers/i2c.c	/^    SM_SEND_ADDR,$/;"	e	enum:__anonfe5e22c20103	file:
SM_SEND_RESTART	drivers/i2c.c	/^    SM_SEND_RESTART,$/;"	e	enum:__anonfe5e22c20103	file:
SM_WRITE_DATA	drivers/i2c.c	/^    SM_WRITE_DATA,$/;"	e	enum:__anonfe5e22c20103	file:
SRCS	Makefile	/^SRCS := $(wildcard *.c)$/;"	m
ST	drivers/ads1110.h	/^#define ST /;"	d
STATE_CONVERT	drivers/ads1110.h	/^#define STATE_CONVERT /;"	d
STATE_STANDBY	drivers/ads1110.h	/^#define STATE_STANDBY /;"	d
SUBDIRS	Makefile	/^SUBDIRS = drivers$/;"	m
SYS_MSG_NONE	drivers/sys_messagebus.h	/^    SYS_MSG_NONE = 0,$/;"	e	enum:sys_message
SYS_MSG_P1IFG	drivers/sys_messagebus.h	/^    SYS_MSG_P1IFG = BIT6,       \/\/ button press$/;"	e	enum:sys_message
SYS_MSG_TIMER0_CCR0	drivers/sys_messagebus.h	/^    SYS_MSG_TIMER0_CCR0 = BIT0,$/;"	e	enum:sys_message
SYS_MSG_TIMER0_CCR1	drivers/sys_messagebus.h	/^    SYS_MSG_TIMER0_CCR1 = BIT1, \/\/ timer_a0_delay_noblk_ccr1$/;"	e	enum:sys_message
SYS_MSG_TIMER0_CCR2	drivers/sys_messagebus.h	/^    SYS_MSG_TIMER0_CCR2 = BIT2, \/\/ timer_a0_delay_noblk_ccr2$/;"	e	enum:sys_message
SYS_MSG_TIMER0_CCR3	drivers/sys_messagebus.h	/^    SYS_MSG_TIMER0_CCR3 = BIT3, \/\/ timer_a0_delay_noblk_ccr3$/;"	e	enum:sys_message
SYS_MSG_TIMER0_CCR4	drivers/sys_messagebus.h	/^    SYS_MSG_TIMER0_CCR4 = BIT4,$/;"	e	enum:sys_message
SYS_MSG_TIMER0_IFG	drivers/sys_messagebus.h	/^    SYS_MSG_TIMER0_IFG = BIT5,  \/\/ timer0 overflow$/;"	e	enum:sys_message
SYS_MSG_UART1_RX	drivers/sys_messagebus.h	/^    SYS_MSG_UART1_RX = BIT7     \/\/ UART received something$/;"	e	enum:sys_message
TARGET	Makefile	/^TARGET	:= DEBUG$/;"	m
TARGET	Makefile	/^TARGET	:= RELEASE$/;"	m
TIMER_A0_EVENT_CCR0	drivers/timer_a0.h	/^    TIMER_A0_EVENT_CCR0 = BIT0,$/;"	e	enum:timer_a0_event
TIMER_A0_EVENT_CCR1	drivers/timer_a0.h	/^    TIMER_A0_EVENT_CCR1 = BIT1,$/;"	e	enum:timer_a0_event
TIMER_A0_EVENT_CCR2	drivers/timer_a0.h	/^    TIMER_A0_EVENT_CCR2 = BIT2,$/;"	e	enum:timer_a0_event
TIMER_A0_EVENT_CCR3	drivers/timer_a0.h	/^    TIMER_A0_EVENT_CCR3 = BIT3,$/;"	e	enum:timer_a0_event
TIMER_A0_EVENT_CCR4	drivers/timer_a0.h	/^    TIMER_A0_EVENT_CCR4 = BIT4,$/;"	e	enum:timer_a0_event
TIMER_A0_EVENT_IFG	drivers/timer_a0.h	/^    TIMER_A0_EVENT_IFG = BIT5,$/;"	e	enum:timer_a0_event
TIMER_A0_EVENT_NONE	drivers/timer_a0.h	/^    TIMER_A0_EVENT_NONE = 0,$/;"	e	enum:timer_a0_event
TRIG1	proj.h	/^#define TRIG1 /;"	d
UART1_EV_NONE	drivers/uart1.h	/^    UART1_EV_NONE = 0,$/;"	e	enum:uart1_tevent
UART1_EV_RX	drivers/uart1.h	/^    UART1_EV_RX = BIT0,$/;"	e	enum:uart1_tevent
UART1_EV_TX	drivers/uart1.h	/^    UART1_EV_TX = BIT1$/;"	e	enum:uart1_tevent
UART1_RXBUF_SZ	drivers/uart1.h	/^#define UART1_RXBUF_SZ /;"	d
USCI_A1_ISR	drivers/uart1.c	/^void USCI_A1_ISR(void)$/;"	f	typeref:typename:void
USCI_BX_ISR	drivers/i2c.c	/^void USCI_BX_ISR(void)$/;"	f	typeref:typename:void
USE_ADC	config.h	/^#define USE_ADC$/;"	d
USE_WATCHDOG	config.h	/^#define USE_WATCHDOG$/;"	d
USE_XT1	config.h	/^#define USE_XT1$/;"	d
VERSION	proj.h	/^#define VERSION /;"	d
_10ms	drivers/timer_a0.h	/^#define _10ms /;"	d
_10s	drivers/timer_a0.h	/^#define _10s /;"	d
_10sp	drivers/timer_a0.h	/^#define _10sp /;"	d
_1200ms	drivers/timer_a0.h	/^#define _1200ms /;"	d
_14s	drivers/timer_a0.h	/^#define _14s /;"	d
_1s	drivers/timer_a0.h	/^#define _1s /;"	d
_2s	drivers/timer_a0.h	/^#define _2s /;"	d
_30s	drivers/timer_a0.h	/^#define _30s /;"	d
_3s	drivers/timer_a0.h	/^#define _3s /;"	d
_3sp	drivers/timer_a0.h	/^#define _3sp /;"	d
_500ms	drivers/timer_a0.h	/^#define _500ms /;"	d
_5s	drivers/timer_a0.h	/^#define _5s /;"	d
_5sp	drivers/timer_a0.h	/^#define _5sp /;"	d
_60s	drivers/timer_a0.h	/^#define _60s /;"	d
_6s	drivers/timer_a0.h	/^#define _6s /;"	d
_6sp	drivers/timer_a0.h	/^#define _6sp /;"	d
_75s	drivers/timer_a0.h	/^#define _75s /;"	d
_CONFIG_H_	config.h	/^#define _CONFIG_H_$/;"	d
_I2C_H_	drivers/i2c.h	/^#define _I2C_H_$/;"	d
_I2C_INTERNAL_H_	drivers/i2c_internal.h	/^#define _I2C_INTERNAL_H_$/;"	d
__ADC_H__	drivers/adc.h	/^#define __ADC_H__$/;"	d
__FLASH_H__	drivers/flash.h	/^#define __FLASH_H__$/;"	d
__I2C_CONFIG_H__	drivers/i2c_config.TEMPLATE.h	/^#define __I2C_CONFIG_H__$/;"	d
__PROJ_H__	proj.h	/^#define __PROJ_H__$/;"	d
__SERIAL_BITBANG_	drivers/serial_bitbang.h	/^#define __SERIAL_BITBANG_$/;"	d
__SYS_MESSAGEBUS_H__	drivers/sys_messagebus.h	/^#define __SYS_MESSAGEBUS_H__$/;"	d
__TIMER_A0_H__	drivers/timer_a0.h	/^#define __TIMER_A0_H__$/;"	d
__UART1_H__	drivers/uart1.h	/^#define __UART1_H__$/;"	d
__ads1110_h_	drivers/ads1110.h	/^#define __ads1110_h_$/;"	d
__anonfe5e22c20103	drivers/i2c.c	/^typedef enum {$/;"	g	file:
__anonfe5e22c20208	drivers/i2c.c	/^static struct {$/;"	s	file:
__anonfe5e22c70108	drivers/i2c.h	/^typedef struct {$/;"	s
__anonfe5e22c70203	drivers/i2c.h	/^typedef enum {$/;"	g
adc10_ISR	drivers/adc.c	/^void adc10_ISR(void)$/;"	f	typeref:typename:void
adc10_halt	drivers/adc.c	/^void adc10_halt(void)$/;"	f	typeref:typename:void
adc10_read	drivers/adc.c	/^void adc10_read(const uint8_t port, uint16_t * rv, const uint8_t vref)$/;"	f	typeref:typename:void
adc10_rv	drivers/adc.c	/^volatile uint16_t *adc10_rv;$/;"	v	typeref:typename:volatile uint16_t *
adc_en	proj.h	/^    uint8_t adc_en;             \/\/ enable internal adc for battery check$/;"	m	struct:settings_t	typeref:typename:uint8_t
adcready	drivers/adc.c	/^volatile uint8_t adcready;$/;"	v	typeref:typename:volatile uint8_t
addr	drivers/i2c.h	/^    uint8_t addr[3];        \/\/\/< register\/command payload$/;"	m	struct:__anonfe5e22c70108	typeref:typename:uint8_t[3]
addr_len	drivers/i2c.h	/^    uint8_t addr_len;       \/\/\/< Number of addr bytes to use (1-3)$/;"	m	struct:__anonfe5e22c70108	typeref:typename:uint8_t
ads1110	drivers/ads1110.h	/^struct ads1110 {$/;"	s
ads1110_config	drivers/ads1110.c	/^uint8_t ads1110_config(const uint8_t slave_addr, const uint8_t val)$/;"	f	typeref:typename:uint8_t
ads1110_convert	drivers/ads1110.c	/^void ads1110_convert(struct ads1110 *adc)$/;"	f	typeref:typename:void
ads1110_init	drivers/ads1110.c	/^uint8_t ads1110_init(const uint8_t slave_address, const uint8_t config_reg)$/;"	f	typeref:typename:uint8_t
ads1110_read	drivers/ads1110.c	/^uint8_t ads1110_read(const uint8_t slave_addr, struct ads1110 *adc)$/;"	f	typeref:typename:uint8_t
ads1110_state_machine	drivers/ads1110.c	/^static void ads1110_state_machine(enum sys_message msg)$/;"	f	typeref:typename:void	file:
all	Makefile	/^all: depend config.h tags $(PROJ).elf$/;"	t
callback	drivers/i2c.c	/^    void (*callback) (i2c_status_t result);$/;"	m	struct:__anonfe5e22c20208	typeref:typename:void (*)(i2c_status_t result)	file:
check_events	proj.c	/^void check_events(void)$/;"	f	typeref:typename:void
clean	Makefile	/^clean: $(SUBDIRS)$/;"	t
config	drivers/ads1110.h	/^    uint8_t config;     \/\/ adc configuration register$/;"	m	struct:ads1110	typeref:typename:uint8_t
config.h	Makefile	/^config.h:$/;"	t
conv	drivers/ads1110.h	/^    int16_t conv;       \/\/ int voltage value *10^4$/;"	m	struct:ads1110	typeref:typename:int16_t
conv_raw	drivers/ads1110.h	/^    int16_t conv_raw;   \/\/ adc raw output$/;"	m	struct:ads1110	typeref:typename:int16_t
data	drivers/i2c.h	/^    uint8_t *data;          \/\/\/< Pointer to data transfer buffer$/;"	m	struct:__anonfe5e22c70108	typeref:typename:uint8_t *
data_len	drivers/i2c.h	/^    uint16_t data_len;      \/\/\/< Number of bytes to transfer$/;"	m	struct:__anonfe5e22c70108	typeref:typename:uint16_t
defaults	proj.h	/^static const struct settings_t defaults = {$/;"	v	typeref:typename:const struct settings_t
delay_c	drivers/serial_bitbang.h	/^#define delay_c /;"	d
delay_s	drivers/serial_bitbang.h	/^#define delay_s /;"	d
depend	Makefile	/^depend: $(PROJ).dep$/;"	t
display_menu	proj.c	/^void display_menu(void)$/;"	f	typeref:typename:void
doc	Makefile	/^doc:$/;"	t
eadc	drivers/ads1110.h	/^struct ads1110 eadc;$/;"	v	typeref:struct:ads1110
eadc_delta	proj.h	/^    int16_t eadc_delta;         \/\/ 0V correction for the EADC$/;"	m	struct:settings_t	typeref:typename:int16_t
eadc_en	proj.h	/^    int8_t eadc_en;             \/\/ enable external adc. 0 false, 1 true, -1 false but ADS1110 /;"	m	struct:settings_t	typeref:typename:int8_t
false	proj.h	/^#define false /;"	d
flash_erase	drivers/flash.c	/^uint8_t flash_erase(uint8_t *segment_addr)$/;"	f	typeref:typename:uint8_t
flash_read	drivers/flash.c	/^uint8_t flash_read(uint8_t *segment_addr, void *data, const uint8_t len)$/;"	f	typeref:typename:uint8_t
flash_save	drivers/flash.c	/^uint8_t flash_save(uint8_t *segment_addr, void *data, const uint8_t len)$/;"	f	typeref:typename:uint8_t
fn	drivers/sys_messagebus.h	/^    void (*fn) (enum sys_message);$/;"	m	struct:sys_messagebus	typeref:typename:void (*)(enum sys_message)
i2c_init	drivers/i2c.c	/^void i2c_init(void)$/;"	f	typeref:typename:void
i2c_package_t	drivers/i2c.h	/^} i2c_package_t;$/;"	t	typeref:struct:__anonfe5e22c70108
i2c_state_t	drivers/i2c.c	/^} i2c_state_t;$/;"	t	typeref:enum:__anonfe5e22c20103	file:
i2c_status_t	drivers/i2c.h	/^} i2c_status_t;$/;"	t	typeref:enum:__anonfe5e22c70203
i2c_transfer_start	drivers/i2c.c	/^void i2c_transfer_start(const i2c_package_t * pkg,$/;"	f	typeref:typename:void
i2c_transfer_status	drivers/i2c.c	/^i2c_status_t i2c_transfer_status(void)$/;"	f	typeref:typename:i2c_status_t
i2c_tx_buff	drivers/i2c.h	/^uint8_t i2c_tx_buff[I2C_TX_BUFF_LEN];$/;"	v	typeref:typename:uint8_t[]
i2c_uninit	drivers/i2c.c	/^void i2c_uninit(void)$/;"	f	typeref:typename:void
i2cm_rx	drivers/serial_bitbang.c	/^uint8_t i2cm_rx(uint8_t * buf, const uint16_t length, const uint8_t options)$/;"	f	typeref:typename:uint8_t
i2cm_rxfrom	drivers/serial_bitbang.c	/^uint8_t i2cm_rxfrom(const uint8_t slave_address, uint8_t * data,$/;"	f	typeref:typename:uint8_t
i2cm_start	drivers/serial_bitbang.c	/^uint8_t i2cm_start(void)$/;"	f	typeref:typename:uint8_t
i2cm_stop	drivers/serial_bitbang.c	/^void i2cm_stop(void)$/;"	f	typeref:typename:void
i2cm_tx	drivers/serial_bitbang.c	/^uint8_t i2cm_tx(const uint8_t data, const uint8_t options)$/;"	f	typeref:typename:uint8_t
i2cm_txbyte	drivers/serial_bitbang.c	/^uint8_t i2cm_txbyte(const uint8_t slave_address, const uint8_t data)$/;"	f	typeref:typename:uint8_t
idx	drivers/i2c.c	/^    uint16_t idx;$/;"	m	struct:__anonfe5e22c20208	typeref:typename:uint16_t	file:
install	Makefile	/^install: $(PROJ).elf$/;"	t
latch_disable	proj.h	/^#define latch_disable /;"	d
latch_enable	proj.h	/^#define latch_enable /;"	d
led_off	proj.h	/^#define led_off /;"	d
led_on	proj.h	/^#define led_on /;"	d
led_switch	proj.h	/^#define led_switch /;"	d
listens	drivers/sys_messagebus.h	/^    enum sys_message listens;$/;"	m	struct:sys_messagebus	typeref:enum:sys_message
main	proj.c	/^int main(void)$/;"	f	typeref:typename:int
main_init	proj.c	/^void main_init(void)$/;"	f	typeref:typename:void
messagebus	drivers/sys_messagebus.h	/^struct sys_messagebus *messagebus;$/;"	v	typeref:struct:sys_messagebus *
modinit.c	Makefile	/^modinit.c:$/;"	t
modinit.o	Makefile	/^modinit.o: modinit.c$/;"	t
next	drivers/sys_messagebus.h	/^    struct sys_messagebus *next;$/;"	m	struct:sys_messagebus	typeref:struct:sys_messagebus *
next_state	drivers/i2c.c	/^    i2c_state_t next_state;$/;"	m	struct:__anonfe5e22c20208	typeref:typename:i2c_state_t	file:
pkg	drivers/i2c.c	/^    i2c_package_t *pkg;$/;"	m	struct:__anonfe5e22c20208	typeref:typename:i2c_package_t *	file:
pkg	drivers/i2c.h	/^i2c_package_t pkg;$/;"	v	typeref:typename:i2c_package_t
port1_irq	proj.c	/^static void port1_irq(enum sys_message msg)$/;"	f	typeref:typename:void	file:
port1_last_event	proj.c	/^volatile uint8_t port1_last_event;$/;"	v	typeref:typename:volatile uint8_t
read	drivers/i2c.h	/^    bool read;              \/\/\/< Indicates if the transfer is a read operation or not.$/;"	m	struct:__anonfe5e22c70108	typeref:typename:bool
s	proj.c	/^struct settings_t s;$/;"	v	typeref:struct:settings_t
scl_high	drivers/serial_bitbang.h	/^#define scl_high /;"	d
scl_low	drivers/serial_bitbang.h	/^#define scl_low /;"	d
sda_high	drivers/serial_bitbang.h	/^#define sda_high /;"	d
sda_low	drivers/serial_bitbang.h	/^#define sda_low /;"	d
settings_init	proj.c	/^void settings_init(void)$/;"	f	typeref:typename:void
settings_t	proj.h	/^struct settings_t {$/;"	s
slave_addr	drivers/i2c.h	/^    uint8_t slave_addr;     \/\/\/< Chip address of slave device$/;"	m	struct:__anonfe5e22c70108	typeref:typename:uint8_t
standby_time	proj.h	/^    uint16_t standby_time;      \/\/ number of TA0 overflows after which latch is disabled$/;"	m	struct:settings_t	typeref:typename:uint16_t
standby_unused	proj.h	/^    uint16_t standby_unused;    \/\/ innactivity timeout after which latch is disabled$/;"	m	struct:settings_t	typeref:typename:uint16_t
state	drivers/ads1110.h	/^    uint8_t state;      \/\/ state machine parameter$/;"	m	struct:ads1110	typeref:typename:uint8_t
status	drivers/i2c.c	/^    i2c_status_t status;$/;"	m	struct:__anonfe5e22c20208	typeref:typename:i2c_status_t	file:
str_temp	proj.c	/^char str_temp[120];$/;"	v	typeref:typename:char[120]
str_to_uint16	proj.c	/^uint8_t str_to_uint16(char *str, uint16_t * out, const uint8_t seek,$/;"	f	typeref:typename:uint8_t
sys_message	drivers/sys_messagebus.h	/^enum sys_message {$/;"	g
sys_messagebus	drivers/sys_messagebus.h	/^struct sys_messagebus {$/;"	s
sys_messagebus_register	drivers/sys_messagebus.c	/^void sys_messagebus_register(void (*callback) (enum sys_message),$/;"	f	typeref:typename:void
sys_messagebus_unregister	drivers/sys_messagebus.c	/^void sys_messagebus_unregister(void (*callback) (enum sys_message))$/;"	f	typeref:typename:void
tags	Makefile	/^tags: $(SRCS)$/;"	t
timer0_A1_ISR	drivers/timer_a0.c	/^void timer0_A1_ISR(void)$/;"	f	typeref:typename:void
timer_a0_delay_noblk_ccr1	drivers/timer_a0.c	/^void timer_a0_delay_noblk_ccr1(uint16_t ticks)$/;"	f	typeref:typename:void
timer_a0_delay_noblk_ccr2	drivers/timer_a0.c	/^void timer_a0_delay_noblk_ccr2(uint16_t ticks)$/;"	f	typeref:typename:void
timer_a0_delay_noblk_ccr3	drivers/timer_a0.c	/^void timer_a0_delay_noblk_ccr3(uint16_t ticks)$/;"	f	typeref:typename:void
timer_a0_event	drivers/timer_a0.h	/^enum timer_a0_event {$/;"	g
timer_a0_init	drivers/timer_a0.c	/^void timer_a0_init(void)$/;"	f	typeref:typename:void
timer_a0_irq	proj.c	/^static void timer_a0_irq(enum sys_message msg)$/;"	f	typeref:typename:void	file:
timer_a0_last_event	drivers/timer_a0.h	/^volatile enum timer_a0_event timer_a0_last_event;$/;"	v	typeref:typename:volatile enum timer_a0_event
timer_a0_ovf	drivers/timer_a0.h	/^volatile uint16_t timer_a0_ovf;$/;"	v	typeref:typename:volatile uint16_t
transfer	drivers/i2c.c	/^} transfer;$/;"	v	typeref:struct:__anonfe5e22c20208
true	proj.h	/^#define true /;"	d
tue	proj.c	/^int16_t tue;                    \/\/ ticks until end$/;"	v	typeref:typename:int16_t
uart1_init	drivers/uart1.c	/^void uart1_init(void)$/;"	f	typeref:typename:void
uart1_last_event	drivers/uart1.h	/^volatile enum uart1_tevent uart1_last_event;$/;"	v	typeref:typename:volatile enum uart1_tevent
uart1_p	drivers/uart1.h	/^volatile uint8_t uart1_p;$/;"	v	typeref:typename:volatile uint8_t
uart1_rx_buf	drivers/uart1.h	/^volatile char uart1_rx_buf[UART1_RXBUF_SZ];$/;"	v	typeref:typename:volatile char[]
uart1_rx_enable	drivers/uart1.h	/^uint8_t uart1_rx_enable;$/;"	v	typeref:typename:uint8_t
uart1_rx_err	drivers/uart1.h	/^uint8_t uart1_rx_err;$/;"	v	typeref:typename:uint8_t
uart1_rx_irq	proj.c	/^static void uart1_rx_irq(enum sys_message msg)$/;"	f	typeref:typename:void	file:
uart1_tevent	drivers/uart1.h	/^enum uart1_tevent {$/;"	g
uart1_tx_str	drivers/uart1.c	/^uint16_t uart1_tx_str(char *str, uint16_t size)$/;"	f	typeref:typename:uint16_t
uc_disable	proj.h	/^#define uc_disable /;"	d
uc_enable	proj.h	/^#define uc_enable /;"	d
ver	proj.h	/^    uint8_t ver;                \/\/ firmware version$/;"	m	struct:settings_t	typeref:typename:uint8_t
